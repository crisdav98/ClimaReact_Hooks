{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Error.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Formulario","datosConsulta","useState","ciudad","pais","busqueda","guardarBusqueda","handleChange","e","target","name","value","onSubmit","preventDefault","type","id","onChange","htmlFor","Error","mensaje","Clima","resultado","console","log","main","parseInt","temp","temp_max","temp_min","App","guardarCiudad","guardarPais","error","guardarError","guardarResultado","useEffect","consultarApi","componente","a","async","url","fetch","respuesta","json","cod","datos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53577461.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header({titulo}){\r\n    return(\r\n        <nav>\r\n            <div className=\"nav-wrapper light-blue darken-2\">\r\n    <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, {useState} from \"react\";\r\n\r\nfunction Formulario({datosConsulta}) {\r\n    // State del Componente\r\n    // Busqueda = state y guardarBusqueda = this.setState({})\r\n    const [busqueda, guardarBusqueda] = useState({\r\n        ciudad:'',\r\n        pais: ''\r\n    })\r\n\r\n  // Función que se ejecuta en el onChange para guardar el valor\r\n  const handleChange = e => {\r\n    //cambiar el state\r\n    guardarBusqueda({\r\n        // Siempre se debe de hacer una copia del state\r\n        ...busqueda,\r\n        [e.target.name] : e.target.value\r\n    })\r\n  };\r\n\r\n  //Función para consultar el clima\r\n  const consultarClima = e =>{\r\n      e.preventDefault();\r\n      // Pasar hacia el componente principal(App.js) la busqueda del usuario\r\n      datosConsulta(busqueda);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={consultarClima}>\r\n      <div className=\"input-field col s12\">\r\n        <input type=\"text\" name=\"ciudad\" id=\"ciudad\" onChange={handleChange} />\r\n        <label htmlFor=\"ciudad\">Ciudad: </label>\r\n      </div>\r\n      <div className=\"input-field col s12\">\r\n        <select onChange={handleChange} name=\"pais\">\r\n          <option value=\"\">Selecciona un país:</option>\r\n          <option value=\"US\">Estados Unidos</option>\r\n          <option value=\"MX\">México</option>\r\n          <option value=\"ES\">España</option>\r\n          <option value=\"AR\">Argentina</option>\r\n          <option value=\"CO\">Colombia</option>\r\n          <option value=\"EC\">Ecuador</option>\r\n          <option value=\"CR\">Costa Rica</option>\r\n          <option value=\"PE\">Perú</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"input-field col s12\">\r\n        <input type=\"submit\" className=\"waves-effect waves-light btn-large btn-block yellow accent-4\" value=\"Buscar Clima\"/>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\n\r\nfunction Error({mensaje}){\r\n    return(\r\n        <div className=\"card-panel red darken-4 error col s12\">\r\n            {mensaje}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error;","import React from 'react';\r\n\r\nfunction Clima({resultado}){\r\n    console.log(resultado);\r\n    //extraer los valores\r\n    const {name, main} = resultado;\r\n    if(!name) return null;\r\n    \r\n    // restar grados kelvin\r\n    const kelvin = 273.15;\r\n    return (\r\n        <div className=\"card-panel white col s12\">\r\n            <div className=\"black-text\"> \r\n                <h2>El clima de {name} es:</h2>\r\n                <p className=\"temperatura\">\r\n                {parseInt(main.temp - kelvin,10)} <span>&#x2103;</span>\r\n                </p>\r\n                <p>Temperatura Máxima: {parseInt(main.temp_max - kelvin,10)} &#x2103;</p>\r\n                <p>Temperatura Mínima: {parseInt(main.temp_min - kelvin,10)} &#x2103;</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Clima;","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Error from './components/Error';\nimport Clima from './components/Clima';\n\nfunction App() {\n  // State Principal\n  const [ciudad,guardarCiudad] = useState('');\n  const [pais, guardarPais] = useState('');\n  const[error,guardarError] = useState(false);\n  const [resultado,guardarResultado] = useState({});\n\n  useEffect(()=>{\n    // Prevenir la ejecucuón la primera vez\n    if(ciudad ==='' || pais ===''){\n      return;\n    }\n    consultarApi();\n    \n  },[ciudad,pais])\n\n\n  // Función  que vamos a pasar a Formulario para obtener los datos del Formulario\n  const datosConsulta = datos =>{\n    // Validar que ambos campos esten con datos\n    if(datos.ciudad ==='' || datos.pais === ''){\n      // Un error\n      guardarError(true);\n      return;\n    }else{\n      // Guardar los datos que vienen del formulario\n      guardarCiudad(datos.ciudad);\n      guardarPais(datos.pais);\n      guardarError(false);\n    }\n\n  }\n\n  // Consultar con la API\n  const consultarApi = async () =>{\n    const appId = 'eebbf9252172e7e4709e3e2614354ab6';\n    const url=`https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n    // consultar la url\n    const respuesta = await fetch(url);\n    const resultado = await respuesta.json();\n\n    guardarResultado(resultado);\n  }\n\n  // Cargar un componente condicionalmente\n  let componente;\n  if(error){\n    // hay un error se muestra\n    componente = <Error mensaje='Ambos campos son obligatorios'/>\n  }else if(resultado.cod === '404'){\n    componente = <Error mensaje='La ciudad no existe en el registro'/>\n  }else{\n    // si no hay errores se muestra el clima\n    componente=<Clima resultado = {resultado}/>;\n  }\n  return (\n    <div className=\"App\">\n      <Header\n        titulo ='Clima React App'\n      />\n\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s12 m6\">\n              <Formulario\n              datosConsulta = {datosConsulta}\n              />\n            </div>\n            <div className=\"col s12 m6\">\n              {componente}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}